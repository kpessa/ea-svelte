Hi Cursor AI! We're developing a complex Svelte application, and I need your help to ensure our code is top-notch. Here are some guidelines:

- **Framework**: Svelte. Please follow Svelte's syntax and best practices, including proper use of reactivity, stores, and component composition.
- **Complexity vs. Simplicity**: The app is intricate, so while I value simple and clean code, ensure that solutions are comprehensive and fit the project's complexity.
- **Data Mocking**: Do not mock data in the main codebase; reserve mocking for tests and Storybook stories.
- **Refactoring**: If a component exceeds roughly 200-300 lines or becomes hard to maintain, suggest refactoring it into smaller, more focused components.
- **Clarifications**: If you're unsure about any requirements or need more context, feel free to ask for clarification.

Let's collaborate to make this app both powerful and maintainable!

# Design Rules and Dependencies

## Framework and Core Dependencies
- Use Svelte 5 as the front-end framework
- Use TypeScript for type safety
- Use Vite as the build tool
- Use Svelte stores for state management
- Use Tailwind CSS for styling

## UI Components and Styling
- Use Tailwind CSS for all styling
- Follow Tailwind's utility-first approach
- Use Tailwind's component classes for consistent styling
- Implement responsive design using Tailwind's responsive prefixes
- Use Tailwind's dark mode for theming
- Keep custom styles minimal and only when necessary

## Code Organization
- Keep components in src/lib/components
- Keep types in src/lib/types
- Keep stores in src/lib/stores
- Keep configuration in src/config
- Keep custom Tailwind styles in src/styles

## State Management
- Use Svelte stores for global state
- Keep component state local when possible
- Use props for component communication
- Use events for child-to-parent communication

## Development Guidelines
- Write TypeScript interfaces for all data structures
- Use strict TypeScript settings
- Follow Svelte 5 best practices
- Keep components focused and single-responsibility
- Use Tailwind's @apply directive sparingly
- Follow Tailwind's mobile-first approach

## Version Control
- Use Git for version control
- Follow conventional commit format:
  - feat: for new features
  - fix: for bug fixes
  - docs: for documentation changes
  - style: for formatting changes
  - refactor: for code refactoring
  - test: for adding or modifying tests
  - chore: for maintenance tasks
- Write clear, descriptive commit messages
- Keep commits focused and atomic (one logical change per commit)
- Include relevant context in commit messages
- Review changes before committing
- Commit frequently with meaningful changes

# Project Configuration
- Using Svelte 5 with TypeScript for modern, type-safe web development
- Vite as the build tool for fast development and optimized production builds
- Tailwind CSS for utility-first styling
- CodeMirror for JSON configuration editing
- Using the existing @config.json as the base configuration template for the application
- All new configuration changes should follow the structure and naming conventions established in @config.json

# Code Organization
- Components in src/lib/components/
- Services in src/lib/services/
- Types in src/lib/types.ts
- Configuration in src/config/

# Development Guidelines
- Use TypeScript for type safety
- Follow Svelte 5 best practices
- Implement responsive design using Tailwind's responsive prefixes
- Keep custom CSS minimal, prefer Tailwind utilities
- Maintain compatibility with the existing @config.json structure when making changes

# State Management
- Use Svelte stores for global state
- Config state managed through configStore
- Reactive updates for configuration changes