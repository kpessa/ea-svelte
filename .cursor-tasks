# Electrolyte Advisor Application Tasks

## Story 1: Project Setup and Basic Structure
- [x] Initialize Svelte 5 project with TypeScript support
- [x] Set up project dependencies (jQuery, CodeMirror)
- [x] Create basic project structure and directories
- [x] Set up routing for tab navigation
- [x] Create basic layout components (navbar, split panel)
- [x] Configure Vite for Svelte 5
- [x] Set up TypeScript configuration
- [x] Create design rules and guidelines

## Story 2: Core Data Management
- [x] Create configuration loading system
- [x] Implement concept state management
- [x] Set up test patient data management
- [x] Create concept evaluation system
- [x] Implement configuration editor with CodeMirror

## Story 3: Main UI Components
- [x] Create tab navigation component
- [x] Implement criteria panel
- [x] Build orders panel with sections
- [x] Create order selection interface
- [x] Implement debug mode toggle

## Story 3b: Order Display and Debug Enhancements
- [x] Fix orders not displaying in order sections
- [x] Enable HTML rendering in section headers
- [x] Enhance debug mode to show concept expressions
- [x] Improve order section visibility and styling
- [x] Add concept evaluation indicators

## Story 3c: Clinical UI Styling
- [x] Implement patient header with demographics
- [x] Style tabs to match clinical system
- [x] Create clinical-style order sections
- [x] Implement checkbox and radio button styling
- [x] Add edit/collapse buttons for sections

## Story 4: Test Patient Management
- [x] Create test patient manager interface
- [x] Implement test case creation/editing
- [x] Add test case application functionality
- [x] Create test patient data persistence
- [x] Add test case validation

## Story 5: Concept Management
- [x] Create concept manager interface
- [x] Implement concept state editor
- [x] Add concept expression evaluator
- [x] Create concept validation system
- [x] Implement concept persistence

## Story 5b: Concept Extraction
- [x] Create concept extraction service
- [x] Implement concept reference tracking
- [x] Add concept usage reporting
- [x] Connect extraction to config changes
- [x] Add extraction UI to Concept Manager

## Story 5c: Concept Test Framework
- [x] Create test scenario model
- [x] Implement test path visualization
- [x] Add concept-based test case generation
- [x] Create test execution engine
- [x] Implement test results reporting
- [x] Add regression testing capabilities

## Story 5d: Enhanced Concept Selection
- [x] Group concepts by tab and section
- [x] Create hierarchical concept selector
- [x] Implement concept toggle interface
- [x] Add value input for applicable concepts
- [x] Connect extraction results to test framework
- [x] Default new path nodes to selected concept values

## Story 5e: Enhanced Concept Evaluation and Integration
- [x] Redesign Concept Manager with hierarchical concept view
- [x] Increase Concept Manager window size for better usability
- [x] Add integration between Concept Manager and Test Framework
- [x] Implement ability to assign concept states to test scenarios
- [x] Enhance concept evaluation visualization
- [x] Add concept-based section rendering control

## Story 5f: Enhanced Concept Expression Evaluator
- [x] Implement step-by-step evaluation process for concept expressions
- [x] Add support for "[%" and "%]" delimiters in expressions
- [x] Translate English logical operators (AND, OR, NOT) to JavaScript operators
- [x] Create syntax highlighting for concepts, operators, and delimiters
- [x] Implement ability to toggle concepts by clicking on them in expressions
- [x] Add debug mode button for evaluating expressions in order sections
- [x] Create evaluation modal to display step-by-step evaluation results
- [x] Enhance visual presentation of evaluation steps for better clarity

## Story 5g: Concept Visibility and Order Section Filtering
- [x] Add visual indicator showing active concept count in the UI
- [x] Create concept status summary component
- [x] Implement "Evaluate Order Sections" button to filter sections
- [x] Add logic to show only order sections with true concept expressions
- [x] Create "Show All Orders" button to reset section visibility
- [x] Add visual feedback when sections are filtered
- [x] Ensure filtering state persists across tab changes
- [x] Implement smooth transitions for section visibility changes

## Story 5h: Enhanced Test Path Graph Visualization
- [ ] Make graph view the top-level visualization for test scenarios
- [ ] Implement ability to define decision points and options
- [ ] Add feature to build graph based on defined decisions
- [ ] Create interactive node editing with add/remove functionality
- [ ] Implement "Add Descendant" button on nodes to extend paths horizontally
- [ ] Add concept inheritance visualization between connected nodes
- [ ] Enhance node styling to show active concepts within each node
- [ ] Implement drag-and-drop functionality for rearranging nodes
- [ ] Add zoom and pan controls for navigating large graphs
- [ ] Create export/import functionality for graph structures

## Story 5i: Hierarchical Test Path Management
- [x] Implement hierarchical indented list view for test paths
- [x] Add parent-child relationship between test paths
- [ ] Create functionality to create a new test scenario from scratch
- [ ] Implement ability to add the first test path with initial concepts
- [ ] Add visual indicators for path depth in list view
- [ ] Create collapsible/expandable path groups in list view
- [ ] Implement inheritance of concepts from parent paths to child paths
- [ ] Add ability to override inherited concepts in child paths
- [ ] Create breadcrumb navigation for deep path hierarchies
- [ ] Implement path cloning with modifications for branch creation
- [ ] Add batch operations for multiple paths (delete, move, apply concepts)
- [ ] Create path comparison view to highlight differences between paths

## Story 6: Styling and Polish
- [ ] Set up base styling system
- [ ] Create component-specific styles
- [ ] Implement responsive design
- [ ] Add animations and transitions
- [ ] Polish UI/UX elements

## Story 7: Testing and Documentation
- [ ] Add unit tests for core functionality
- [ ] Create integration tests
- [ ] Write component documentation
- [ ] Add user documentation
- [ ] Perform final testing and bug fixes 